#!/bin/sh


# FILE NAME NUMBER SANITY CHECK
# This is a short program to check that a list of files are numbered
# sequentially. It only checks the first number in a files name. It will find
# the file name with the lowest number and check that all the files after it
# that contain a number are sequentially numbered (printing out missing ranges
# along the way). It is intended to be used as a simple sanity check.


################################################################################
#                        COMMANDS PATHS / SCRIPTS START                        #
################################################################################
LS_PROG="/bin/ls"
READ_PROG="/usr/bin/read"
AWK_PROG="/usr/bin/awk"
RM_PROG="/bin/rm"
ECHO_PROG="echo"
EXIT_PROG="exit"
################################################################################
#                               AWK PROGRAM START                              #
################################################################################
AWK_SCRIPT=$(cat << 'EOF'
function printDetectedEmptyFiles()
{
       DETECTED_EMPTY_FILE = "FALSE"
       for(i in EMPTY_FILES)
	{
		if(DETECTED_EMPTY_FILE == "FALSE")
		{
			DETECTED_EMPTY_FILE = "TRUE"
			print "Detected empty numbered file/s:"
		}
		print "\t\"" EMPTY_FILES[i] "\""
	}
}


BEGIN {}


{
	if(NF > 8)
	{
		NAME = ""

		for(i = NF; i > 8; i--)
		{
			# Concatinate all the fields after 8 for the current
			# record.
			if(i == NF)
			{
				NAME = $i
			}
			else
			{
				NAME = $i " " NAME
			}

			# Note that match sets RSTART and RLENGTH.
			if(match($i, /[0-9]+/))
			{
				# Record number that was in name (Note that this
				# will only save the first number in the name.)
				NAME_NUMBER = $i
				NAME_NUMBER = substr(NAME_NUMBER,
						     RSTART, RLENGTH)
			}
		}
		if(NAME ~ /[0-9]+/)
		{
			# Add name to FILES array with index NR if NAME contains
			# a number.
			# sub(/^ +/, "", NAME)
			sub(/\s+$/, "", NAME)
			FILES[NR] = NAME
			FILES_NUMBERS[NR] = NAME_NUMBER

			if($5 == 0)
			{
				EMPTY_FILES[NR] = NAME
			}
		}
	}
}


END {
	if(length(FILES) < 2)
	{
		print "Less than two files with a number in their name \
detected..."
		printDetectedEmptyFiles()
		exit(-1)
	}

        # Copy arrays into new arrays with sequential indexes.
        SORTED_INDEX = 1
        FILES_SORTED[1] = ""
	FILES_NUMBERS_SORTED[1] = ""
	for(i in FILES)
        {
	    FILES_SORTED[SORTED_INDEX] = FILES[i]
	    FILES_NUMBERS_SORTED[SORTED_INDEX] = FILES_NUMBERS[i]
	    SORTED_INDEX += 1
	}

	# Here we use the most lovely and fast bubble sort!
        SWAPPED = "TRUE"
	for(i = 1; i < length(FILES_NUMBERS_SORTED); i++)
	{
	    if(SWAPPED == "FALSE")
	    {
		# Break out of the loop if we have finished sorting.
		break
	    }
	    SWAPPED = "FALSE"

            for(j = 1; j < length(FILES_NUMBERS_SORTED); j++)
	    {
		# If either argument is a string the other will be cast to a
		# string before the comparison. So we add "+ 0" to both.
            	if ((FILES_NUMBERS_SORTED[j] + 0) > \
(FILES_NUMBERS_SORTED[j+1] + 0))
		{
		   SWAPPED = "TRUE" # Note that we did some sorting.
                   # Swap elements
                   temp = FILES_NUMBERS_SORTED[j]
                   FILES_NUMBERS_SORTED[j] = FILES_NUMBERS_SORTED[j+1]
                   FILES_NUMBERS_SORTED[j+1] = temp
                   temp = FILES_SORTED[j]
                   FILES_SORTED[j] = FILES_SORTED[j+1]
                   FILES_SORTED[j+1] = temp
            	}
            }
    	}

	# Get length of longest file name and number (used to format output.)
	MAX_NAME_LENGTH = 0
	for(i = 1; i <= length(FILES_SORTED); i++)
	{
		if(MAX_NAME_LENGTH < length(FILES_SORTED[i]))
		{
			MAX_NAME_LENGTH = length(FILES_SORTED[i])
		}
	}
       	MAX_NUM_LENGTH = length(FILES_NUMBERS_SORTED[length(FILES_NUMBERS_SORTED)])
	printf("File numbering range starts at: %*i (for file \"%*s\")\n",  \
MAX_NUM_LENGTH, FILES_NUMBERS_SORTED[1], MAX_NUM_LENGTH, FILES_SORTED[1])
    	for(i = 1; i < length(FILES_NUMBERS_SORTED); i++)
    	{
		if(FILES_NUMBERS_SORTED[i] + 1 != \
FILES_NUMBERS_SORTED[i + 1] + 0 && FILES_NUMBERS_SORTED[i] != \
FILES_NUMBERS_SORTED[i + 1] + 0)
		{
			# Numbers are not in sequence or not the same.
			printf("\tGap in file numbering between files \"%*s\" \
and \"%*s\"\n", MAX_NAME_LENGTH, FILES_SORTED[i], MAX_NAME_LENGTH, \
FILES_SORTED[i + 1])
		}
	}
	printf("File numbering range ends at:   %*i (for file \"%*s\")\n",  \
MAX_NUM_LENGTH, FILES_NUMBERS_SORTED[length(FILES_NUMBERS_SORTED)], \
MAX_NUM_LENGTH, FILES_SORTED[length(FILES_NUMBERS_SORTED)])

       DETECTED_PART_FILE = "FALSE"
       for(i = 1; i <= length(FILES_SORTED); i++)
       {
		if(FILES_SORTED[i] ~ /\.part$/)
		{
			if(DETECTED_PART_FILE == "FALSE")
			{
				DETECTED_PART_FILE = "TRUE"
				print "Detected numbered part file/s:"
			}
			print "\t\"" FILES_SORTED[i] "\""
		}

       }

       printDetectedEmptyFiles()
}
EOF
)

IFS='' # set the delimiter to null character
$READ_PROG var << EOF
$AWK_SCRIPT
EOF
################################################################################
#                                AWK PROGRAM END                               #
################################################################################
################################################################################
#                         COMMANDS PATHS / SCRIPTS END                         #
################################################################################


################################################################################
#                               SHELL VARS START                               #
################################################################################
NO_COLOR='\033[0m'
RED='\033[0;31m'		# Indicates bad things :'(
GREEN='\033[0;32m'		# Indicates all is well in the world :)
TMP_FILE="fnnsc.tmp"
SUPPORTED_ARG_NUM="2"
################################################################################
#                                SHELL VARS END                                #
################################################################################


printValidArgs()
{
    $ECHO_PROG -e "$GREEN"$0"$NO_COLOR"" supports the following argument\s:"
    $ECHO_PROG -e "\t-h/--help\t\tPrints this message."
    $ECHO_PROG -e "\t-a/--all\t\tTells "$0" to include hidden files in it's \
\n\t\t\t\tanalysis."
    $ECHO_PROG -e "\tDIR\t\t\tWhere DIR is a valid and readable directory\n\
\t\t\t\ttells "$0" to perform it's ananysis on the\n\t\t\t\tfiles in DIR \
instead of the current working\n\t\t\t\tdirectory."
}


printHelp()
{
    $ECHO_PROG -e "$GREEN"$0"$NO_COLOR"" is designed to check files in a \
directory for sequential naming.\nIt sorts all files that have a number in \
their name in the searched directory by\nthe first number in their name. \
Numbers are read as integers. It will print the\nname of the file with the \
lowest number in it's name as well as the number with\nthe highest. It prints \
any missing ranges between the numbering of files. It\nprints the names of any \
files with a .part extension. Finally it will also\nprint any files with \
numbers in their names that have a size of 0 bytes."
    printValidArgs
}


main()
{
    if [ $# -gt "$SUPPORTED_ARG_NUM" ]
    then
	$ECHO_PROG -e "$RED""Error: ""$NO_COLOR""$GREEN"$0"$NO_COLOR"" supports\
 a maximum number of"\
		   "$SUPPORTED_ARG_NUM" "arguemnt/s at a time."
	$EXIT_PROG 255
    fi

    ARGUMENTS=""
    # Default directory argument.
    DIR_ARG="./"
    # Check if any argument was found.
    FOUND_ARG="FALSE"
    # Check if argument has already been found.
    FOUND_DIR_ARG="FALES"
    FOUND_ALL_ARG="FALSE"
    INITIAL_ARG_NUMS=$#
    while [ $# -gt 0 ]; do
	# Check for a directory that is readable. If the argument is a directory
	# but it is not valid it will cause an error to be printed below.
	if [ -d "$1" ] && [ -r "$1" ]
	then
	   if [ "$FOUND_DIR_ARG" = "TRUE" ]
	   then
	       $ECHO_PROG -e "$RED""Error:""$NO_COLOR"" detected multiple\
 occurrences of the directory argument argument. "
	       $EXIT_PROG 254
	   fi
	   FOUND_DIR_ARG="TRUE"
	   
	   DIR_ARG="$1"
	   shift 1
	   continue
	fi
	   
	case $1 in
	    -a|--all)
		ALL_ARG="-a"
		# Each case statement should make sure that it is only hit once.
		if [ "$FOUND_ALL_ARG" = "TRUE" ]
		then
		    $ECHO_PROG -e "$RED""Error:""$NO_COLOR"" detected multiple\
 occurrences of the -a/--all argument. "
		   $EXIT_PROG 253
		fi
		FOUND_ALL_ARG="TRUE"
		
		# Each case statement should contain the following two lines.
		FOUND_ARG="TRUE"
		shift 1
		;;
	esac
	case $1 in
	    -h|--help)
		if [ "$INITIAL_ARG_NUMS" -gt 1 ]
		then
		    $ECHO_PROG -e "$RED""Error:""$NO_COLOR"" the -h/--help \
argument must appear by itself."
		    $EXIT_PROG 252
		fi
		printHelp
		$EXIT_PROG 251
	    ;;
	esac

	# If you need to add another command line option (that the AWK script
	# should know) that is for example called foo. You can use something
	# like the following. "ARGUMENTS="$ARGUMENTS""FOO_ARG=TRUE "" adds
	# "FOO_ARG=TRUE" to the list of arguments that will be passed to the AWK
	# script. You should then be able to access it in the AWK script using
	# the name "FOO_ARG". You also need to update "SUPPORTED_ARG_NUM".
 # 	case $1 in
 # 	    -f|foo)
 # 		# Add argument to argument list.
 # 		ARGUMENTS="$ARGUMENTS""FOO_ARG=TRUE "
 # 		# Each case statement should make sure that it is only hit once.
 # 		if [ "$FOUND_FOO_ARG" = "TRUE" ]
 # 		then
 # 		    $ECHO_PROG "Error: detected multiple occurrences of the\
 # -f/--foo argument "
 # 		    $EXIT_PROG 250
 # 		fi
 # 		FOUND_FOO_ARG="TRUE"
		
 # 		# Each case statement should contain the following two lines.
 # 		FOUND_ARG="TRUE"
 # 		shift 1
 # 		;;
 # 	esac

	# If we didn't hit any of the cases in the case statement then the
	# current argument being processed isn't valid.
	if [ "$FOUND_ARG" = "FALSE" ]
	then
	    $ECHO_PROG -e "$RED""Error:""$NO_COLOR"" \"$1\"\nis not a valid \
argument. If it is a directory it may not be a valid directory or\nit may not \
be readable as the current user."
	    printValidArgs
	    $EXIT_PROG 249
	fi
	FOUND_ARG="FALSE"
    done

    # Get a listing of the working directory.
    $LS_PROG -l $ALL_ARG "$DIR_ARG" > $TMP_FILE
    if [ "$ARGUMENTS" != "" ]
    then
	$AWK_PROG -v "$ARGUMENTS" "$AWK_SCRIPT" $TMP_FILE
    else
	# If there were no CMD args call AWK script without any args.
	$AWK_PROG "$AWK_SCRIPT" $TMP_FILE
    fi
    $RM_PROG $TMP_FILE
}


main $@				# Use $@ to pass CMD args to main.
